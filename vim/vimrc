" VIMRC
"
" Read the various sections to see all the command mappings
" Many (but not all) of the plugs have mini-documentation
" where they are configured.


" Automatic reloading of .vimrc
"autocmd! bufwritepost .vimrc source %



"Must be first since this sets some options as a side effect
set nocompatible

set shell=/bin/bash


" they don't actually do the same thing in VIM, so it is nice to remap Ctrl+c to
" escape so that it does
:inoremap <c-c> <esc>

:inoremap <c-v> <esc>pa


nnoremap ; :
vnoremap ; :

nnoremap : ;
vnoremap : ;

set fillchars+=vert:\a


let g:pathogen_disabled = ['jedi-vim', 'vipy', 'syntastic', 'vim-gitignore']
" Pathogen : package manager {{{
filetype off
call pathogen#infect()
call pathogen#helptags()
filetype plugin on
filetype indent on
filetype on
" }}}

set encoding=utf-8


" Enable syntax highlight
syntax enable

" Color scheme - dark
call togglebg#map("<F5>")
set background=dark
set t_Co=256
colorscheme solarized

color wombat256mod


" Font and size -- set one that works with Powerline
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 11

" Remove those pesky scrollbars from the gui
"set guioptions+=LlRrb
"set guioptions-=LlRrb
set guioptions=aem
"set guioptions=-t


" Misc
let is_bash=1
set autoread          "auto-reload modified files (with no local changes)
set undolevels=1024   " lots of undo (default 1000)
set history=1024      " lost of history (default 20)
set mouse=a           " enable mouse
set ttymouse=xterm    " Set this to the name of your terminal that supports mouse codes.
set bs=1              " set the backspace behaviour to normal ?????
"set hidden            " allo un-saved buffers in background
set nohidden
set lazyredraw        "no redraws in macros
set confirm           "dialog when :q, :w, :x, ;wq fails
set title             " change terminal title
set nostartofline     "don't move cursor when switching buffers/fiels
set ttyfast           "smoother changes



" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
set nobackup          " that's what git is for
set nowritebackup
set noswapfile

" Folding
set foldmethod=syntax "fold using syntax by default
set foldminlines=4    " require a medium size to fold
set foldnestmax=3     " max 3 fold levels for syntax/indent folding

" Appearance
set number            " enable line numbers
set scrolloff=3       "keep 3 lines below and above the cursor
set sidescrolloff=3   "keep 10 characters left and right when scrolling
set linebreak         "show warp at word boundaries
set showbreak=\ ↪\    " preview wrap with ↪

set nowrap
"set wrap
"autocmd InsertEnter * set nowrap
"autocmd InsertLeave * set wrap
"autocmd BufWinEnter * set wrap

set tw=99
set colorcolumn=100    " highlight column 80
"highlight ColorColumn
set cursorline

" Yanking lines inconsistencies
nnoremap Y y$


" Set new splits to open on bottom and on right
set splitbelow
set splitright

" Clipboard
set clipboard=unnamedplus " shared system clipboard.
" <F2>: enter paste mode (while in insert mode) to paste from outside vim safely
noremap <F2> :set invpaste paste?<cr>
set pastetoggle=<F2>

" Autocompletion
set wildmenu               "completion with menu
set wildmode=list:full  " list instead of fill in options
set wildignore=*~,*.o,*.d,*.obj,*.class,*.bak,*.swp,.svn,.git,*.aux,*.pdf,*.out,*.blg,*.bbl,*.bcf
set suffixes=~,.o,.d,.obj,.class,.bak,.swp
"set completeopt=menu,preview " Completion with a menu
set completeopt=longest,menu


"au FileType python set omnifunc=pythoncomplete#Complete
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-n>"

set copyindent
set nosmartindent  " disable C-style indenting by default (only useful for C/C++)
set tabstop=4      " Number of spaces that a <Tab> in the file counts for (default 8)
set shiftwidth=4   " Number of spaces to use for each step of (auto)indent.
set softtabstop=4  " default
set shiftround
set expandtab      " force a \t to be 2 spaces when I insert it
set textwidth=0    " no hard wrapping by default
set backspace=indent,eol,start  " backspace through everything in insert mode


" Better search
set incsearch      " incremental search
set ignorecase     " ignore case in search
set smartcase      " override ignorecase if uppercase is used in search string
set hlsearch       " enable search highlighting (change to nohlsearch to disable)
                   " clear highlight with :noh

" Allow to navigate with tags
set tagstack
set tags=./tags

" Show more thigns
set showmode       " show which mode we are in
set showcmd        " show state of keyboard input
set showmatch      " show brace match
set matchtime=2    " faster brace match
set report=0       " report all changes
set ruler          " show position in bottom right

" list inivisible characters to display
set listchars=
"set listchars+=eol:¶
set listchars+=tab:»·
set listchars+=extends:›
set listchars+=precedes:‹
set listchars+=nbsp:■
set listchars+=trail:·
set list

" STFU
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Open folds by default
autocmd BufWinEnter * normal zR

" Detect file changes when idle or switching windows
autocmd CursorHold * checktime
autocmd WinEnter * checktime

"Convenient commands

" Use , instead of \ for leader key (must be defined first)
let mapleader=','


" map sort function to a key
vnoremap <Leader>s :sort<CR>


" Up, Down, Left, Right -- switch windows
noremap <left>   <c-w>h
noremap <right>  <c-w>l
noremap <up>     <c-w>k
noremap <down>   <c-w>j

noremap <C-h>  <c-w>h
noremap <C-l>  <c-w>l
noremap <C-k>  <c-w>k
noremap <C-j>  <c-w>j


" Ctrl+Up, Down, Left, Right -- move windows
noremap <C-left>   <c-w>H
noremap <C-right>  <c-w>L
noremap <C-up>     <c-w>K
noremap <C-down>   <c-w>J

" Quick quit command
"noremap <c-q> :quit<CR>  " Quit current window

" Quicksave command
noremap <C-s> :update<CR>
vnoremap <C-s> <C-C>:update<CR>
inoremap <C-s> <C-C>:update<CR>

" Bind nohl
" Removes highlight of your last search
noremap <C-x> :nohl<CR>
vnoremap <C-x> :nohl<CR>
inoremap <C-x> :nohl<CR>

" Move between displayed lines, not physical lines
" with linewrap, move within a line if the line has warpped
nnoremap j gj
nnoremap k gk

" Indent with tab (un-indent with ctrl+space)
nnoremap <tab> >>
nnoremap <s-tab> <<

" This should work for better visual tabbing
vnoremap <tab> >gv
vnoremap <s-tab> <gv



" Reflow paragraph with Q in normal and visual mode
nnoremap Q gwap
vnoremap Q gw


" Align code to the space bar
nnoremap <leader>= :Tabularize /=<cr>
nnoremap <leader>- :Tabularize /,/l0l1<cr>
" find out a way to allow for ranges to be given
"vnoremap = :Tabularize /=<cr>


"" Switch CWD to the directory of the open buffer
noremap <leader>cd :cd %:p:h<cr>:pwd<cr>


" <leader>sp : toggle check SPelling
noremap <leader>sp <esc>:setlocal spell!<cr>


" <leader>sc : search clear highlight
noremap <leader>sc <esc>:noh<cr>

" ctrl+a : select all
nnoremap <c-a> 1GVG


" <leader>sf -- style-format code
"    C++    -- ANSI style (A1), with tabs (assumes c/c++)
"    Python -- PEP8 style (should suppress all style warnings)
autocmd FileType c,cpp,h,hpp nnoremap <leader>sf <esc>:%!astyle -A1 -t<cr>
autocmd FileType python nnoremap <leader>sf <esc>:PyLintAuto<cr>
autocmd Filetype tcl setlocal expandtab tabstop=3 shiftwidth=3 softtabstop=3
autocmd Filetype tex setlocal spell
autocmd Filetype spin setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd Filetype mkd.markdown setlocal wrap spell
autocmd Filetype html setlocal tabstop=2 shiftwidth=2 softtabstop=2


" Global fixes

" Faster timout for actions
set timeout timeoutlen=1000 ttimeoutlen=100

" Re-adjust windows on window resize
"autocmd VimResized * wincmd =


" Jump to last known line when opening a file (change ' to ` to do column too)
" In the exe "normal'\"" statement
autocmd BufReadPost *
  \ if &ft !~ 'COMMIT_EDITMSG' |
  \   if line("'\"") > 0 && line("'\"") <= line("$") |
  \     exe "normal g`\"" |
  \     if foldlevel('.') > 0 |
  \       exe "normal zO" |
  \     endif |
  \   endif |
  \ endif

" Highlight trailing whitespace in the most annoying way possible.
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/


" Set scheme filetype for meep
autocmd BufReadPost *.ctl set filetype=scheme
autocmd BufNewFile *.ctl set filetype=scheme



" Delete trailing white space
fun! DeleteTrailingWS()
    exe "normal mq"
    %s/\s\+$//ge
    exe "normal `q"
    ":ShowMarksClearMark
endfun
" commented out: vim seems to hang on save with this
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.sh :call DeleteTrailingWS()
autocmd BufWrite *.c  :call DeleteTrailingWS()
autocmd BufWrite *.h  :call DeleteTrailingWS()
autocmd BufWrite *.cpp :call DeleteTrailingWS()
autocmd BufWrite *.hpp :call DeleteTrailingWS()
autocmd BufWrite *.m :call DeleteTrailingWS()
"autocmd BufWrite *.coffee :call DeleteTrailingWS()
noremap <leader>dw <esc>:call DeleteTrailingWS()<cr>

autocmd FileType gitcommit setlocal nofoldenable

" Powerline -- fancy status line
"let g:Powerline_symbols = 'fancy'
let g:airline_powerline_fonts = 0
set laststatus=2  " 2 means always show status

" YankStack -- paste older items on stack
nmap <leader>p <Plug>yankstack_substitute_older_paste
nmap <leader>P <Plug>yankstack_substitute_older_paste

" Solarized -- change some color assignments to use less eye-bleeding red
autocmd FileType c,cpp,h,hpp hi Special ctermfg=4


" Automatically insert C++ header gates for new h/hpp files
function! s:insert_gates()
    let gatename = '__' . substitute(toupper(expand("%:t")), "\\.", "_", "g") . '__'
    execute "normal! i#ifndef " . gatename
    execute "normal! o#define " . gatename
    execute "normal! Go#endif /* " . gatename . " */"
    execute "normal! ko"
endfunction
autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()

" Automatically make the header for python files
function! s:InsertPythonHeader()
    let filename = expand("%:t")
    execute "normal! i#!/usr/bin/env python3"
    let modeline = printf("vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
    execute "normal! o#" l:modeline
    execute "normal! o"
endfunction
autocmd BufNewFile *.py call <SID>InsertPythonHeader()


" ScmDiff -- <leader>d : inline diff with GIT version

" NERDCommenter -- use default mappings; some of them are:
"   -- <leader>ci : toggle comment
"   -- <leader>cc : comment;
"   -- <leader>cs : comment 'sexily';


" CtrlP -- searching files/buffers/tags/etc
"   -- when selecting a result:
"     -- enter: open in current window
"     -- ctrl+t: open in new ab
"     -- ctrl+v: open in vert split
"     -- ctrl+s: open in horiz split
noremap <leader>ff <esc>:CtrlP<cr>            " find file
noremap <leader>ft <esc>:CtrlPBufTagAll<cr>   " find tag
noremap <leader>fr <esc>:CtrlPMRUFiles<cr>    " find recently used file
noremap <leader>fb <esc>:CtrlPBuffer<cr>      " find buffer
noremap <leader>fq <esc>:CtrlPQuickfix<cr>    " find in quickfix
noremap <leader>fu <esc>:CtrlPUndo<cr>        " find in undo
noremap <leader>fl <esc>:CtrlPLine<cr>        " find in file (by line)
noremap <c-f> <esc>:CtrlPLine<cr>             " find in file (by line)

"CtrlP -- ignore files
let g:ctrlp_custom_ignore = {
\ 'dir':  '\.git$\|\.hg$\|\.svn$',
\ 'file': '\.exe$\|\.so$\|\.dll$\|\.o$\|\.d$\|\.swp$',
\ }

" CtrlP -- only search current directory
let g:ctrlp_working_path_mode = ''

" CtrlP -- refresh file tree on write or focus change
augroup CtrlPExtension
autocmd!
autocmd FocusGained * ClearCtrlPCache
autocmd BufWritePost * ClearCtrlPCache
augroup END

" GUndo -- <leader>u : show undo tree in right-hand window
nnoremap <leader>u :GundoToggle<cr>
let g:gundo_right = 1

" NERDTree -- file browser on left (mnemonic: All files)
"   -- at : toggle
"   -- ao : open
"   -- af : find (custom function in plugins/sbell.vim)
"   -- ac : close
noremap <leader>at <esc>:NERDTreeToggle<cr><c-w>=
noremap <leader>a. <esc>:NERDTree .<cr><c-w>=
noremap <leader>ao <esc>:NERDTree<cr><c-w>=
noremap <leader>af <esc>:call NERDOpen()<cr>
noremap <leader>ac <esc>:NERDTreeClose<cr><c-w>=
let NERDTreeQuitOnOpen=1

let NERDTreeIgnore = []
for suffix in split(&suffixes, ',')
    let NERDTreeIgnore += [ escape(suffix, '.~') . '$' ]
endfor
let NERDTreeIgnore += ['\.o', '\.lo']

let NERDTreeIgnore += ['^\.bundle$', '^\.bzr$', '^\.git$', '^\.hg$', '^\.sass-cache$', '^\.svn$', '^\.$', '^\.\.$', '^Thumbs\.db$']

" NERDTree -- open if no files are listed and set width to 30
autocmd vimenter * if !argc() | NERDTree | endif
let g:NERDTreeWinSize = 30
" Close if NERDTree is the only thing left
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Syntastic -- inline syntax errors
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1

let g:syntastic_mode_map = { 'mode': 'active',
                                    \ 'active_filetypes': [],
                                    \ 'passive_filetypes': ['c', 'cpp', 'h', 'hpp'] }




" Task List
" http://sontek.net/blog/detail/turning-vim-into-a-modern-python-ide#basic-editing-and-debugging
map <leader>td <Plug>TaskList

" Change font size
" http://vim.wikia.com/wiki/Change_font_size_quickly

let s:pattern = '^\(.* \)\([1-9][0-9]*\)$'
let s:minfontsize = 6
let s:maxfontsize = 30

function! AdjustFontSize(amount)
if has("gui_gtk2") && has("gui_running")
  let fontname = substitute(&guifont, s:pattern, '\1', '')
  let cursize = substitute(&guifont, s:pattern, '\2', '')
  let newsize = cursize + a:amount
  if (newsize >= s:minfontsize) && (newsize <= s:maxfontsize)
    let newfont = fontname . newsize
    let &guifont = newfont
  endif
else
  echoerr "You need to run the GTK2 version of Vim to use this function."
endif
endfunction

function! LargerFont()
    call AdjustFontSize(1)
endfunction
command! LargerFont call LargerFont()

function! SmallerFont()
    call AdjustFontSize(-1)
endfunction
command! SmallerFont call SmallerFont()



noremap = :LargerFont<CR>
noremap - :SmallerFont<CR>
"noremap  <C-->      :SmallerFont<CR>
"inoremap <C-->      <C-C>:SmallerFont<CR>
"noremap  <C-=>      :LargerFont<CR>
"inoremap <C-=>      <C-C>:LargerFont<CR>


"indent guides (vim-indent-guides)
"let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1


"Vim signify
" match solarized colors
exe "hi! SignifySignAdd"    .g:solarized_vars['fmt_bold'] .g:solarized_vars['fg_green']
exe "hi! SignifySignDelete" .g:solarized_vars['fmt_bold'] .g:solarized_vars['fg_red']
exe "hi! SignifySignChange" .g:solarized_vars['fmt_bold'] .g:solarized_vars['fg_orange']

" use ~ instead of ! for changes
let g:signify_sign_change = '~'
"
" " only check git and hg (faster by not checking for the 8 other supported
" VCS)
let g:signify_vcs_list = [ 'git' ]

"vim-ipython
let g:ipy_use_ctr_s_mappings = 0
let g:ipy_complete_func      = 'local'
let g:ipy_unique_to_session  = 1

"Chaning fonts with + - in gui :D
let s:defaultfontsize = substitute(&guifont, s:pattern, '\2', '')

function! SetFontSize(the_size)
    if has("gui_gtk2") && has("gui_running")
        let fontname = substitute(&guifont, s:pattern, '\1', '')
        let newfont = fontname . a:the_size
        let &guifont = newfont
    else
        echoerr "You need to run the GTK2 version of VIM to use this function."
    endif
endfunction

command! DefaultFont call SetFontSize(s:defaultfontsize)
"noremap <C>0 :DefaultFont<CR>

" Fugutive -- git (note the other command: <leader>d for inline diff)
noremap <leader>gb <esc>:Gblame<cr>
noremap <leader>gs <esc>:Gstatus<cr>
noremap <leader>gd <esc>:Gdiff<cr>
noremap <leader>gl <esc>:Glog<cr>
noremap <leader>gc <esc>:Gcommit<cr>
noremap <leader>gp <esc>:Gpush<cr>


" Python jedi -- fancy autocomplete
" https://github.com/davidhalter/jedi-vim
"   (jedi#auto_vim_configuration sets completeopt to include a pesky window at
"   the top which I don't want)
"   <ctrl+space> or <tab> -- autocomplete
"   <enter>         -- jump to declaration
"   <leader><enter> -- jump to definition
"   <leader>rn      -- rename
"
"let g:jedi#goto_assignments_command = "<leader>g"
"let g:jedi#goto_definitions_command = "<leader>d"
"let g:jedi#documentation_command = "K"
"let g:jedi#usages_command = "<leader>n"
"let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>rn"
"let g:jedi#show_call_signatures = "1"
let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_select_first = 1
